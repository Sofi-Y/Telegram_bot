# 6104124209:AAGMpC-9xLsFEfEo447esiRjrlhLiofVnF8
import logging
import random
import pymorphy2
import time
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ConversationHandler
from telegram import ReplyKeyboardMarkup
import asyncio
import sqlite3
import inspect
import datetime

def funcname():
    return inspect.stack()[1][3]


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
con = sqlite3.connect("users_db.db")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
cur = con.cursor()


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)

reply_keyboard = [['/motivation', '/picture'],
                  ['/set_timer', '/dialog']]

markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
POSITIVE = ['–∑–¥–æ—Ä–æ–≤', '—Ö–æ—Ä–æ—à', '–ø—Ä–µ–∫—Ä–∞—Å–Ω', '–æ—Ç–ª–∏—á–Ω',
            '–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω', '–ª—É—á—à–µ']
NEGATIVE = ['–ø–ª–æ—Ö', '—É–∂–∞—Å–Ω', '–Ω–µ –æ—á–µ–Ω—å']
NORMAL = ['—Ç–∞–∫ —Å–µ–±–µ', '–Ω–∏—á–µ–≥–æ', '–Ω–æ—Ä–º–∞–ª—å–Ω', '–Ω–∏ —Ç–æ –Ω–∏ —Å—ë', '–Ω–∏ —Ç–æ –Ω–∏ —Å–µ']
WEATHER1 = ['—Å–æ–ª–Ω', '—Ç–µ–ø–ª', '—Ç—ë–ø–ª', '–∂–∞—Ä']
WEATHER2 = ['–ø–∞—Å–º—É—Ä', '—Ö–æ–ª–æ–¥', '–¥–æ–∂–¥', '—Å—ã—Ä–æ', '–æ–±–ª–∞—á–Ω–æ']

TIMER = 5 * 60

@bot.message_handler(content_types=['photo'])
def photo_id(message):
    photo = max(message.photo, key=lambda x: x.height)
    print('ok')
    

def remove_job_if_exists(name, context):
    current_jobs = context.job_queue.get_jobs_by_name(name)
    if not current_jobs:
        return False
    for job in current_jobs:
        job.schedule_removal()
    return True


async def set_timer(update, context, a=5 * 60):
    aa = funcname()
    chat_id = update.message.chat_id
    await update.effective_message.reply_text('–í—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ —Ç–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç')
    if a:
        global TIMER
        TIMER = int(args[0])        
    chat_id = update.effective_message.chat_id
    job_removed = remove_job_if_exists(str(chat_id), context)
    context.job_queue.run_once(task, TIMER, chat_id=chat_id, name=str(chat_id), data=TIMER)
    text = f'–í–µ—Ä–Ω—É—Å—å —á–µ—Ä–µ–∑ {TIMER}—Å.!'
    if job_removed:
        text += ' –°—Ç–∞—Ä–∞—è –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.'
    await update.effective_message.reply_text(text)


async def task(context):
    await context.bot.send_message(context.job.chat_id, text=f'{TIMER}c. –ø—Ä–æ—à–ª–∏!')
    

async def unset(update, context):
    chat_id = update.message.chat_id
    aa = funcname()
    job_removed = remove_job_if_exists(str(chat_id), context)
    text = '–¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω!' if job_removed else '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤'
    await update.message.reply_text(text)
    
    
async def dialog(update, context):
    aa = funcname()
    chat_id = update.message.chat_id
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ –º–Ω–æ–π\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä, –ø–æ—Å–ª–∞–≤ –∫–æ–º–∞–Ω–¥—É /stop.\n"
        "–ö–∞–∫ —É –í–∞—Å –¥–µ–ª–∞?")
    return 1


async def stop(update, context):
    await update.message.reply_text("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!")
    return ConversationHandler.END


async def first_response(update, context):
    things = update.message.text.lower()
    context.user_data['mood'] = update.message.text
    global POSITIVE
    global NEGATIVE
    global NORMAL
    for x in POSITIVE:
        if x in things:
            await update.message.reply_text(
                f"–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!!!")
    for x in NEGATIVE:
        if x in things:
            await update.message.reply_text(
                f"–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –±—É–¥–µ—Ç –ª—É—á—à–µ! –≠—Ç–æ —Ç–æ—á–Ω–æüòä")
    for x in NORMAL:
        if x in things:
            await update.message.reply_text(
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!")
    logger.info(things)
    await update.message.reply_text(
        f"–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ —É –≤–∞—Å –≤ –≥–æ—Ä–æ–¥–µ?")
    return 2



async def second_response(update, context):
    things = update.message.text.lower()
    context.user_data['mood'] = update.message.text
    global POSITIVE
    global NEGATIVE
    global NORMAL
    for x in POSITIVE:
        if x in things:
            await update.message.reply_text(
                f"–Ø—Å–Ω–µ–Ω—å–∫–æ")
    for x in WEATHER1:
        if x in things:
            await update.message.reply_text(
                f"–Ø—Å–Ω–µ–Ω—å–∫–æ")
    for x in NEGATIVE:
        if x in things:
            await update.message.reply_text(
                f"–£ –ø—Ä–∏—Ä–æ–¥—ã –Ω–µ—Ç –ø–ª–æ—Ö–æ–π –ø–æ–≥–æ–¥—ã")
    for x in NORMAL:
        if x in things:
            await update.message.reply_text(
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!")
    for x in WEATHER2:
        if x in things:
            await update.message.reply_text(
                f"—Ä–∞–∑–Ω–∞—è –±—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥–∞...")
    logger.info(things)
    await update.message.reply_text(
        f"–ö–∞–∫ –≤—ã –ø–æ–∂–∏–≤–∞–µ—Ç–µ?")
    return 3


async def third_response(update, context):
    inf = update.message.text
    logger.info(inf)
    await update.message.reply_text("–ü–æ–Ω—è—Ç–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –±–µ—Å–µ–¥—É! –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!")
    return ConversationHandler.END


conv_handler = ConversationHandler(
    entry_points=[CommandHandler('dialog', dialog)],
    states={
        1: [MessageHandler(filters.TEXT & ~filters.COMMAND, first_response)],
        2: [MessageHandler(filters.TEXT & ~filters.COMMAND, second_response)],
        3: [MessageHandler(filters.TEXT & ~filters.COMMAND, third_response)]
       },
    fallbacks=[CommandHandler('stop', stop)]
   )


async def start(update, context):
    user = update.effective_user
    aa = funcname()
    chat_id = update.message.chat_id   
    await update.message.reply_text(
        '''–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è,
    –Ω–∞–∂–º–∏—Ç–µ /motivation. –ï—Å–ª–∏ –∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ - /picture
    –∏–ª–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–æ—Ç–æ–º, –Ω–∞–ø–∏—Å–∞–≤ /dialog –∏–ª–∏ –∑–∞–¥–∞—Ç—å —Ç–∞–π–º–µ—Ä –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –Ω–∞ 5 –º–∏–Ω—É—Ç,
    –æ—Ç–ø—Ä–∞–≤–∏–≤ /set_timer''',
        reply_markup=markup
    )

async def picture(update, context):
    aa = funcname()
    chat_id = update.message.chat_id
    pic = random.choice(['img/1.jpg', 'img/2.jpg', 'img/3.jpg',
                         'img/4.jpg', 'img/5.jpg'])
    await context.bot.send_photo(update.message.chat_id, photo=open(pic, 'rb'))


async def help_command(update, context):
    chat_id = update.message.chat_id
    aa = funcname()
    global con
    global cur
    cur.execute('''INSERT INTO users(id,action,time) VALUES(chat_id,aa,datetime.datetime.now()''')
    await update.message.reply_text('''–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è,
    –Ω–∞–∂–º–∏—Ç–µ /motivation. –ï—Å–ª–∏ –∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ - /picture
    –∏–ª–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–æ—Ç–æ–º, –Ω–∞–ø–∏—Å–∞–≤ /dialog –∏–ª–∏ –∑–∞–¥–∞—Ç—å —Ç–∞–π–º–µ—Ä –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –Ω–∞ 5 –º–∏–Ω—É—Ç,
    –æ—Ç–ø—Ä–∞–≤–∏–≤ /set_timer''')
    await update.message.reply_text(f'–ó–∞–ø–∏—Å–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö:{context.user_data}')
    
    
async def motivation(update, context):
    aa = funcname()
    chat_id = update.message.chat_id
    a = random.choice(['–ù–µ —Å—á–∏—Ç–∞–π –¥–Ω–∏, –∏–∑–≤–ª–µ–∫–∞–π –∏–∑ –Ω–∏—Ö –ø–æ–ª—å–∑—É',
                       '–£—Å–µ—Ä–¥–Ω–æ —Ä–∞–±–æ—Ç–∞–π—Ç–µ, –º–µ—á—Ç–∞–π—Ç–µ –ø–æ-–∫—Ä—É–ø–Ω–æ–º—É',
                       '–ú–µ—á—Ç–∞—Ç–µ–ª–∏ - —ç—Ç–æ —Å–ø–∞—Å–∏—Ç–µ–ª–∏ –º–∏—Ä–∞',
                       '–û–¥–∏–Ω –∏–∑ –≤–∞–∂–Ω—ã—Ö –∫–ª—é—á–µ–π –∫ —É—Å–ø–µ—Ö—É - —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ. –í–∞–∂–Ω—ã–π –∫–ª—é—á –∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–µ–±–µ - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
                       '–° –Ω–æ–≤—ã–º –¥–Ω–µ–º –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–æ–≤–∞—è —Å–∏–ª–∞ –∏ –Ω–æ–≤—ã–µ –º—ã—Å–ª–∏',
                       '–ü–æ–±–µ–¥–∞ - —ç—Ç–æ –µ—â–µ –Ω–µ –≤—Å–µ, –≥–ª–∞–≤–Ω–æ–µ —ç—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–±–µ–∂–¥–∞—Ç—å',
                       '–ù–µ—É–¥–∞—á–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ–¥–æ–ª–µ–µ—Ç –º–µ–Ω—è, –µ—Å–ª–∏ –º–æ—è —Ä–µ—à–∏–º–æ—Å—Ç—å –¥–æ–±–∏—Ç—å—Å—è —É—Å–ø–µ—Ö–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω–∞'])
    await update.message.reply_text(a)


def main():
    application = Application.builder().token('6104124209:AAGMpC-9xLsFEfEo447esiRjrlhLiofVnF8').build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("picture", picture))
    application.add_handler(CommandHandler("motivation", motivation))
    application.add_handler(CommandHandler("set_timer", set_timer))
    application.add_handler(CommandHandler("unset", unset))
    application.add_handler(CommandHandler("task", task))    
    application.add_handler(conv_handler)
    application.run_polling()

    
if __name__ == '__main__':
    main()

con.close()