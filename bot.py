# 6104124209:AAGMpC-9xLsFEfEo447esiRjrlhLiofVnF8
import logging
import random
import pymorphy2
import time
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ConversationHandler
from telegram import ReplyKeyboardMarkup
import asyncio
import datetime
import time
import sqlite3
from flask import Flask
import sqlalchemy
import sqlalchemy.orm as orm
from sqlalchemy.orm import Session
import sqlalchemy.ext.declarative as dec

SqlAlchemyBase = dec.declarative_base()

__factory = None


def time_of_day():
    tod_dict = {0: '–Ω–æ—á—å', 1: '–Ω–æ—á—å', 2: '–Ω–æ—á—å',
                    3: '—É—Ç—Ä–æ', 4: '—É—Ç—Ä–æ', 5: '—É—Ç—Ä–æ',
                    6: '—É—Ç—Ä–æ', 7: '—É—Ç—Ä–æ', 8: '—É—Ç—Ä–æ',
                    9: '–¥–µ–Ω—å', 10: '–¥–µ–Ω—å', 11: '–¥–µ–Ω—å',
                    12: '–¥–µ–Ω—å', 13: '–¥–µ–Ω—å', 14: '–¥–µ–Ω—å',
                    15: '–¥–µ–Ω—å', 16: '–¥–µ–Ω—å', 17: '–¥–µ–Ω—å',
                    18: '–≤–µ—á–µ—Ä', 19: '–≤–µ—á–µ—Ä', 20: '–≤–µ—á–µ—Ä',
                    21: '–≤–µ—á–µ—Ä', 22: '–≤–µ—á–µ—Ä', 23: '–≤–µ—á–µ—Ä'}
    dt = datetime.datetime.now()
    h = dt.hour
    if h in tod_dict:
        tod = tod_dict[h]
        return tod

    
def global_init(db_file):
    global __factory
    if __factory:
        return
    if not db_file or not db_file.strip():
        raise Exception("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    conn_str = f'sqlite:///{db_file.strip()}?check_same_thread=False'
    print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–¥—Ä–µ—Å—É {conn_str}")
    engine = sqlalchemy.create_engine(conn_str, echo=False)
    __factory = orm.sessionmaker(bind=engine)
    SqlAlchemyBase.metadata.create_all(engine)


def create_session() -> Session:
    global __factory
    return __factory()


global_init("users_tg.db")


class User(SqlAlchemyBase):
    __tablename__ = 'users'
    id = sqlalchemy.Column(sqlalchemy.Integer,
                           primary_key=True, autoincrement=True)
    name = sqlalchemy.Column(sqlalchemy.String, nullable=True)
    mood = sqlalchemy.Column(sqlalchemy.String, nullable=True)
    rating = sqlalchemy.Column(sqlalchemy.Integer, nullable=True)

    
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)

reply_keyboard = [['/motivation', '/picture'],
                  ['/set_timer', '/dialog', '/rating']]

markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
POSITIVE = ['–∑–¥–æ—Ä–æ–≤', '—Ö–æ—Ä–æ—à', '–ø—Ä–µ–∫—Ä–∞—Å–Ω', '–æ—Ç–ª–∏—á–Ω',
            '–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω', '–ª—É—á—à–µ']
NEGATIVE = ['–ø–ª–æ—Ö', '—É–∂–∞—Å–Ω', '–Ω–µ –æ—á–µ–Ω—å']
NORMAL = ['—Ç–∞–∫ —Å–µ–±–µ', '–Ω–∏—á–µ–≥–æ', '–Ω–æ—Ä–º–∞–ª—å–Ω', '–Ω–∏ —Ç–æ –Ω–∏ —Å—ë', '–Ω–∏ —Ç–æ –Ω–∏ —Å–µ']
WEATHER1 = ['—Å–æ–ª–Ω', '—Ç–µ–ø–ª', '—Ç—ë–ø–ª', '–∂–∞—Ä']
WEATHER2 = ['–ø–∞—Å–º—É—Ä', '—Ö–æ–ª–æ–¥', '–¥–æ–∂–¥', '—Å—ã—Ä–æ', '–æ–±–ª–∞—á–Ω–æ']

TIMER = 5 * 60



def remove_job_if_exists(name, context):
    current_jobs = context.job_queue.get_jobs_by_name(name)
    if not current_jobs:
        return False
    for job in current_jobs:
        job.schedule_removal()
    return True


async def set_timer(update, context):
    name1 = update.message.from_user.username
    user1 = User()
    user1.name = name1
    context.user_data['rating'] = 10
    user1.rating = 10    
    if not context.user_data:
        user1.mood = '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ'
    else:
        user1.mood = context.user_data['mood']
    db_sess = create_session()
    db_sess.add(user1)
    db_sess.commit()
    chat_id = update.message.chat_id
    await update.effective_message.reply_text('–í—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ —Ç–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç')
    global TIMER
    TIMER = 5 * 60
    chat_id = update.effective_message.chat_id
    job_removed = remove_job_if_exists(str(chat_id), context)
    context.job_queue.run_once(task, TIMER, chat_id=chat_id, name=str(chat_id), data=TIMER)
    text = f'–í–µ—Ä–Ω—É—Å—å —á–µ—Ä–µ–∑ {TIMER}—Å.!'
    if job_removed:
        text += ' –°—Ç–∞—Ä–∞—è –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.'
    await update.effective_message.reply_text(text)


async def task(context):
    await context.bot.send_message(context.job.chat_id, text=f'{TIMER}c. –ø—Ä–æ—à–ª–∏!')
    

async def unset(update, context):
    name1 = update.message.from_user.username
    user1 = User()
    user1.name = name1
    context.user_data['rating'] = 10
    user1.rating = 10    
    if not context.user_data:
        user1.mood = '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ'
    else:
        user1.mood = context.user_data['mood']
    db_sess = create_session()
    db_sess.add(user1)
    db_sess.commit()
    chat_id = update.message.chat_id
    job_removed = remove_job_if_exists(str(chat_id), context)
    text = '–¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω!' if job_removed else '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤'
    await update.message.reply_text(text)
    
    
async def dialog(update, context):
    chat_id = update.message.chat_id
    if time_of_day() == '–¥–µ–Ω—å' or time_of_day() == '–≤–µ—á–µ—Ä':
        await update.message.reply_text(
            f'''–î–æ–±—Ä—ã–π {time_of_day()}! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ –º–Ω–æ–π
–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä, –ø–æ—Å–ª–∞–≤ –∫–æ–º–∞–Ω–¥—É /stop.
–ö–∞–∫ —É –í–∞—Å –¥–µ–ª–∞?''')
    elif time_of_day() == '—É—Ç—Ä–æ':
        await update.message.reply_text(
            f'''–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ –º–Ω–æ–π
–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä, –ø–æ—Å–ª–∞–≤ –∫–æ–º–∞–Ω–¥—É /stop.
–ö–∞–∫ —É –í–∞—Å –¥–µ–ª–∞?''')
    else:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ –º–Ω–æ–π\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä, –ø–æ—Å–ª–∞–≤ –∫–æ–º–∞–Ω–¥—É /stop.\n"
            "–ö–∞–∫ —É –í–∞—Å –¥–µ–ª–∞?")
    return 1


async def stop(update, context):
    name1 = update.message.from_user.username
    user1 = User()
    user1.name = name1
    context.user_data['rating'] = 10
    user1.rating = 10
    if not context.user_data:
        user1.mood = '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ'
    else:
        user1.mood = context.user_data['mood']
    db_sess = create_session()
    db_sess.add(user1)
    db_sess.commit()
    await update.message.reply_text("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!")
    return ConversationHandler.END


async def first_response(update, context):
    things = update.message.text.lower()
    context.user_data['mood'] = update.message.text
    context.user_data['rating'] = 10
    name1 = update.message.from_user.username
    user1 = User()
    user1.name = name1
    user1.rating = 10
    if not context.user_data:
        user1.mood = '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ'
    else:
        user1.mood = context.user_data['mood']
    db_sess = create_session()
    db_sess.add(user1)
    db_sess.commit()
    global POSITIVE
    global NEGATIVE
    global NORMAL
    for x in POSITIVE:
        if x in things:
            await update.message.reply_text(
                f"–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!!!")
    for x in NEGATIVE:
        if x in things:
            await update.message.reply_text(
                f"–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –±—É–¥–µ—Ç –ª—É—á—à–µ! –≠—Ç–æ —Ç–æ—á–Ω–æüòä")
    for x in NORMAL:
        if x in things:
            await update.message.reply_text(
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!")
    logger.info(things)
    await update.message.reply_text(
        f"–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ —É –≤–∞—Å –≤ –≥–æ—Ä–æ–¥–µ?")
    return 2



async def second_response(update, context):
    things = update.message.text.lower()
    global POSITIVE
    global NEGATIVE
    global NORMAL
    for x in POSITIVE:
        if x in things:
            await update.message.reply_text(
                f"–Ø—Å–Ω–µ–Ω—å–∫–æ")
    for x in WEATHER1:
        if x in things:
            await update.message.reply_text(
                f"–Ø—Å–Ω–µ–Ω—å–∫–æ")
    for x in NEGATIVE:
        if x in things:
            await update.message.reply_text(
                f"–£ –ø—Ä–∏—Ä–æ–¥—ã –Ω–µ—Ç –ø–ª–æ—Ö–æ–π –ø–æ–≥–æ–¥—ã")
    for x in NORMAL:
        if x in things:
            await update.message.reply_text(
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!")
    for x in WEATHER2:
        if x in things:
            await update.message.reply_text(
                f"—Ä–∞–∑–Ω–∞—è –±—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥–∞...")
    logger.info(things)
    await update.message.reply_text(
        f"–ö–∞–∫ –≤—ã –ø–æ–∂–∏–≤–∞–µ—Ç–µ?")
    return 3


async def third_response(update, context):
    name1 = update.message.from_user.username
    user1 = User()
    user1.name = name1
    context.user_data['rating'] = 10
    user1.rating = 10
    if not context.user_data:
        user1.mood = '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ'
    else:
        user1.mood = context.user_data['mood']
    db_sess = create_session()
    db_sess.add(user1)
    db_sess.commit()
    inf = update.message.text
    logger.info(inf)
    await update.message.reply_text('''–ü–æ–Ω—è—Ç–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –±–µ—Å–µ–¥—É! –¢–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏, —Ç–æ –∏ –≤–æ–ø—Ä–æ—Å—ã –µ–º—É –ª—É—á—à–µ —Å–ª–µ–¥—É–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å –Ω–∞ –ø–æ–¥–æ–±–Ω—É—é —Ç–µ–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ —Ü–µ–ª—è—Ö, —É—Å–µ—Ö–µ, –∑–¥–æ—Ä–æ–≤—å–µ –∏ —Ç–¥''')
    await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –±–æ—Ç—É –≤–æ–ø—Ä–æ—Å?")
    return 12


async def res1(update, context):
    txt = update.message.text.lower()
    if '–¥–∞' in txt:
        await update.message.reply_text('–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å:')
        return 7
    elif '–Ω–µ—Ç' in txt:
        await update.message.reply_text("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!")
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω–∏–º–∞—é")
        return ConversationHandler.END


async def question(update, context):
    a = update.message.text.lower()
    if '–¥–µ–Ω—å–≥' in a or '—Ñ–∏–Ω–∞–Ω—Å' in a or '–∑–∞—Ä–∞–±–æ—Ç' in a:
        await update.message.reply_text('–†–∞–±–æ—Ç–∞–π—Ç–µ —Å—Ç–∞—Ä–∞—Ç–µ–ª—å–Ω–æ –∏ —É—Å–µ—Ä–¥–Ω–æ, —Ç–æ–≥–¥–∞ —É –≤–∞—Å –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è')
    elif '–∑–¥–æ—Ä–æ–≤' in a:
        await update.message.reply_text('–†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–Ω–∏–º–∞–π—Ç–µ—Å—å —Å–ø–æ—Ä—Ç–æ–º –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∏—Ç–∞–π—Ç–µ—Å—å')
    elif '—Å—á–∞—Å—Ç' in a or '—Ä–∞–¥–æ—Å' in a:
        await update.message.reply_text('''–ú—ã—Å–ª–∏—Ç–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ –∏
—Å–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç –≤–∞—Å —Å—á–∞—Å—Ç–ª–∏–≤—ã–º.
–ü–æ—Ç–æ–º –≤–Ω–µ—Å–∏—Ç–µ —ç—Ç–∏ –ø—É–Ω–∫—Ç—ã –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ''')
    elif '–ø—Ä–æ–±–ª–µ' in a or '—Ç—Ä—É–¥–Ω–æ' in a or '–Ω–µ—É–¥–∞—á' in a:
        await update.message.reply_text(random.choice(['–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∏–∞–ª–æ–≥',
                                                       '–î–µ–π—Å—Ç–≤—É–π—Ç–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ',
                                                       '–ü—Ä–µ–¥—Å—Ç–≤–ª—è–π—Ç–µ —Å–≤–æ–π —É—Å–ø–µ—Ö',
        '–ü–æ–¥—É–º–∞–π—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å, –∫–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –ø—Ä–∏–±–ª–∏–∑—è—Ç –≤–∞—Å –∫ –Ω–∞–º–µ—á–µ–Ω–Ω—ã–º —Ü–µ–ª—è–º']))
    elif '–º–µ—á—Ç' in a or '—Ü–µ–ª—å' or '—Ü–µ–ª–µ–π' in a or '–∂–µ–ª–∞–Ω–∏' in a or '—Ü–µ–ª–∏' in a or '—É—Å–ø–µ—à' or '—É—Å–ø–µ—Ö' in a:
        await update.message.reply_text(random.choice(['–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–µ–ª–∞–π—Ç–µ —á—Ç–æ-—Ç–æ, —á—Ç–æ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —Ü–µ–ª–∏', '–í–Ω–µ–¥—Ä—è–π—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏  —Å—Ç–∞–≤—å—Ç–µ —Å–µ–±–µ –≤—ã—Å–æ–∫–∏–µ —Ü–µ–ª–∏.']))
    else:
        await update.message.reply_text('–ò–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω–∏–º–∞—é')
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å. –•–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞?")
    return 8


async def res(update, context):
    txt = update.message.text.lower()
    if '–Ω–µ—Ç' in txt:
        await update.message.reply_text("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!")
        return ConversationHandler.END
    if '–¥–∞' in txt:
        await update.message.reply_text("–í–æ—Ç:")
        return 4
    else:
        await update.message.reply_text('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω–∏–º–∞—é')
        return ConversationHandler.END


async def fourth_response(update, context):
    await update.message.reply_text('''–¢–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞,
–æ—Ç–ø—Ä–∞–≤–∏–≤ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10''')
    return 5


async def fifth_response(update, context):
    r = int(update.message.text)
    name1 = update.message.from_user.username
    user1 = User()
    user1.name = name1
    user1.rating = int(r)
    context.user_data['rating'] = int(r)
    if not context.user_data['mood']:
        user1.mood = '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ'
    else:
        user1.mood = context.user_data['mood']
    db_sess = create_session()
    db_sess.add(user1)
    db_sess.commit()
    con = sqlite3.connect("users_tg.db")
    cur = con.cursor()
    name1 = update.message.from_user.username
    result = cur.execute("""SELECT rating FROM users""").fetchall()
    s = []
    for x in result:
        s.append(int(x[0]))
    N = sum(s) / len(s)
    await update.message.reply_text(f'''–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!
–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –±–æ—Ç–∞ {N} –∏–∑ 10''')
    return ConversationHandler.END
    

conv_handler = ConversationHandler(
    entry_points=[CommandHandler('dialog', dialog)],
    states={
        1: [MessageHandler(filters.TEXT & ~filters.COMMAND, first_response)],
        2: [MessageHandler(filters.TEXT & ~filters.COMMAND, second_response)],
        3: [MessageHandler(filters.TEXT & ~filters.COMMAND, third_response)],
        4: [MessageHandler(filters.TEXT & ~filters.COMMAND, fourth_response)],
        5: [MessageHandler(filters.TEXT & ~filters.COMMAND, fifth_response)],
        7: [MessageHandler(filters.TEXT & ~filters.COMMAND, question)],
        8: [MessageHandler(filters.TEXT & ~filters.COMMAND, res)],
        12: [MessageHandler(filters.TEXT & ~filters.COMMAND, res1)]
       },
    fallbacks=[CommandHandler('stop', stop)]
   )


async def start(update, context):
    user = update.effective_user
    chat_id = update.message.chat_id
    await update.message.reply_text(
        '''–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è,
–Ω–∞–∂–º–∏—Ç–µ /motivation. –ï—Å–ª–∏ –∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ - /picture
–∏–ª–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–æ—Ç–æ–º, –Ω–∞–ø–∏—Å–∞–≤ /dialog –∏–ª–∏ –∑–∞–¥–∞—Ç—å —Ç–∞–π–º–µ—Ä –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –Ω–∞ 5 –º–∏–Ω—É—Ç,
–æ—Ç–ø—Ä–∞–≤–∏–≤ /set_timer''',
        reply_markup=markup
    )

async def picture(update, context):
    chat_id = update.message.chat_id
    pic = random.choice(['img/1.jpg', 'img/2.jpg', 'img/3.jpg',
                         'img/4.jpg', 'img/5.jpg'])
    await context.bot.send_photo(update.message.chat_id, photo=open(pic, 'rb'))


async def help_command(update, context):
    con = sqlite3.connect("users_tg.db")
    cur = con.cursor()
    name1 = update.message.from_user.username
    result = cur.execute("""SELECT mood FROM users
                WHERE name = ?""", (name1, )).fetchone()
    res = cur.execute("""SELECT mood FROM users
                WHERE name = ?""", (name1, )).fetchall()
    n = len(res)
    if result:
        elem = result[0]
        chat_id = update.message.chat_id
        await update.message.reply_text(f'''–û–≥–æ! –í—ã —É–∂–µ –Ω–µ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —ç—Ç–æ—Ç –±–æ—Ç ({n} —Ä–∞–∑).
–ö–æ–≥–¥–∞ –≤—ã –∑–∞—Ö–æ–¥–∏–ª–∏, –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±—ã–ª–æ {elem}. –û—á–µ–Ω—å –∂–¥—ë–º –≤–∞—Å —Å–Ω–æ–≤–∞.''')
    await update.message.reply_text('''–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è,
–Ω–∞–∂–º–∏—Ç–µ /motivation. –ï—Å–ª–∏ –∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ - /picture
–∏–ª–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–æ—Ç–æ–º, –Ω–∞–ø–∏—Å–∞–≤ /dialog –∏–ª–∏ –∑–∞–¥–∞—Ç—å —Ç–∞–π–º–µ—Ä –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –Ω–∞ 5 –º–∏–Ω—É—Ç,
–æ—Ç–ø—Ä–∞–≤–∏–≤ /set_timer''')
    con.close()
    
    
async def motivation(update, context):
    con = sqlite3.connect("users_tg.db")
    cur = con.cursor()
    name1 = update.message.from_user.username
    result = cur.execute("""SELECT mood FROM users
                WHERE name = ?""", (name1, )).fetchone()
    res = cur.execute("""SELECT mood FROM users
                WHERE name = ?""", (name1, )).fetchall()
    n = len(res)
    if result:
        elem = result[0]
        chat_id = update.message.chat_id
        await update.message.reply_text(f'''–û–≥–æ! –í—ã —É–∂–µ –Ω–µ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —ç—Ç–æ—Ç –±–æ—Ç ({n} —Ä–∞–∑).
–ö–æ–≥–¥–∞ –≤—ã –∑–∞—Ö–æ–¥–∏–ª–∏, –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±—ã–ª–æ {elem}. –û—á–µ–Ω—å –∂–¥—ë–º –≤–∞—Å —Å–Ω–æ–≤–∞.''')
    chat_id = update.message.chat_id
    a = random.choice(['–ù–µ —Å—á–∏—Ç–∞–π –¥–Ω–∏, –∏–∑–≤–ª–µ–∫–∞–π –∏–∑ –Ω–∏—Ö –ø–æ–ª—å–∑—É',
                       '–£—Å–µ—Ä–¥–Ω–æ —Ä–∞–±–æ—Ç–∞–π—Ç–µ, –º–µ—á—Ç–∞–π—Ç–µ –ø–æ-–∫—Ä—É–ø–Ω–æ–º—É',
                       '–ú–µ—á—Ç–∞—Ç–µ–ª–∏ - —ç—Ç–æ —Å–ø–∞—Å–∏—Ç–µ–ª–∏ –º–∏—Ä–∞',
                       '–û–¥–∏–Ω –∏–∑ –≤–∞–∂–Ω—ã—Ö –∫–ª—é—á–µ–π –∫ —É—Å–ø–µ—Ö—É - —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ. –í–∞–∂–Ω—ã–π –∫–ª—é—á –∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–µ–±–µ - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
                       '–° –Ω–æ–≤—ã–º –¥–Ω–µ–º –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–æ–≤–∞—è —Å–∏–ª–∞ –∏ –Ω–æ–≤—ã–µ –º—ã—Å–ª–∏',
                       '–ü–æ–±–µ–¥–∞ - —ç—Ç–æ –µ—â–µ –Ω–µ –≤—Å–µ, –≥–ª–∞–≤–Ω–æ–µ —ç—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–±–µ–∂–¥–∞—Ç—å',
                       '–ù–µ—É–¥–∞—á–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ–¥–æ–ª–µ–µ—Ç –º–µ–Ω—è, –µ—Å–ª–∏ –º–æ—è —Ä–µ—à–∏–º–æ—Å—Ç—å –¥–æ–±–∏—Ç—å—Å—è —É—Å–ø–µ—Ö–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω–∞'])
    await update.message.reply_text('–ê –≤–æ—Ç –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è!')
    await update.message.reply_text(a)


def main():
    application = Application.builder().token('6104124209:AAGMpC-9xLsFEfEo447esiRjrlhLiofVnF8').build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("picture", picture))
    application.add_handler(CommandHandler("motivation", motivation))
    application.add_handler(CommandHandler("set_timer", set_timer))
    application.add_handler(CommandHandler("unset", unset))
    application.add_handler(CommandHandler("task", task))    
    application.add_handler(conv_handler)
    application.run_polling()

    
if __name__ == '__main__':
    main()

con.close()
